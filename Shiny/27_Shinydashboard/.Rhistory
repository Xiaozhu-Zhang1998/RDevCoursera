ggplot(data = mtcars, aes(x = mpg)) + geom_histogram(bins = 30))
ggplot(data = mtcars, aes(x = mpg)) + geom_histogram(bins = 30)
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/20_navlist_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/20_navlist_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/20_navlist_panel')
install.packages("shinythemes")
library(shinythemes)
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/21_themes')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/21_themes')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/21_themes')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/21_themes')
themeSelector()
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/21_themes')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/21_themes')
install.packages("rhandsontable")
library(rhandsontable)
# Creating dataset
a = sample(1:10, replace = TRUE)
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
?hot_to_r
?observeEvent
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
?column()
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/22_rhandsontable')
install.packages("installr")
library(installr)
updateR()
?install_github
install_github("yihui/xaringan")
install.packages("devtools")
devtools::install_github("yihui/xaringan")
library(xaringan)
install.packages("xaringan")
library(xaringan)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages('tinytex')
devtools::install_github("yihui/tinytex")
https://yihui.org/tinytex/r/
remotes::install_github('yihui/tinytex')
parse_packages("test.log")
library(tinytex)
tinytex:::install_prebuilt(pkg = "D:\\Program Files\\TinyTeX.zip")
tinytex::tinytex_root()
tl_pkgs()
tlmgr_repo(url = "http://mirrors.tuna.tsinghua.edu.cn/CTAN/")
tinytex::tlmgr_install("texlive-msg-translations")
Sys.Date()
knitr::opts_chunk$set(echo = FALSE)
s <- summary(cars)
knitr::kable(s)
install.packages("kableExtra")
for(i in 1:10){
for(j in 1:13){
paste(i,j)
}
}
paste(1,2,3)
for(i in 1:10){
for(j in 1:13){
paste(i,j)
}
}
for(i in 1:10){
for(j in 1:13){
a <- paste(i,j)
print(a)
}
}
for(i in 1:10){
for(j in 1:13){
a <- paste(i,j)
print(a)
}
}
for(i in 1:10){
for(j in 1:13){
a <- paste(i,j)
print(a)
}
}
shiny::runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/27_Shinydashboard')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/27_Shinydashboard')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/27_Shinydashboard')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/27_Shinydashboard')
library(statsr)
library(dplyr)
library(ggplot2)
data(mlb11)
head(mlb11)
# type your code for Question 2 here, and Knit
plot(mlb11$runs, mlb11$at_bats)
mlb11 %>%
summarise(cor(runs, at_bats))
plot_ss(x = at_bats, y = runs, data = mlb11)
plot_ss(x = at_bats, y = runs, data = mlb11)
plot_ss(x = at_bats, y = runs, data = mlb11)
plot_ss(x = at_bats, y = runs, data = mlb11)
plot_ss(x = at_bats, y = runs, data = mlb11, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
# type your code for Question 4 here, and Knit
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
ggplot(data = mlb11, aes(x = at_bats, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
mlb11 %>%
filter(at_bats == 5579) %>%
select(runs)
# type your code for Question 5 here, and Knit
coef(m1)
# type your code for Question 5 here, and Knit
coef(m1)[1] + coef(m2)[2] * 5579
# type your code for Question 5 here, and Knit
coef(m1)[1] + coef(m2)[2] * 5579
# type your code for Question 5 here, and Knit
coef(m1)[1] + coef(m1)[2] * 5579
# type your code for Question 5 here, and Knit
coef(m1)[1] + coef(m1)[2] * 5579 - 713
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(sample = .resid)) +
stat_qq()
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 20) +
xlab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 15) +
xlab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
m_at_bars <- lm(runs ~ at_bars, data = mlb11)
# type your code for Question 9 here, and Knit
m_at_bats <- lm(runs ~ at_bats, data = mlb11)
summary(m_at_bats)
m_hits <- lm(runs ~ hits, data = mlb11)
summary(m_hits
m_hits <- lm(runs ~ hits, data = mlb11)
m_hits <- lm(runs ~ hits, data = mlb11)
summary(m_hits)
m_wins <- lm(runs ~ wins, data = mlb11)
summary(m_wins)
m_bat_avg <- lm(runs ~ bat_avg, data = mlb11)
summary(m_bat_avg)
# type your code for Question 10 here, and Knit
m_new_obs <- lm(runs ~ new_obs, data = mlb11)
summary(m_new_obs)
m_new_slug <- lm(runs ~ new_slug, data = mlb11)
summary(m_new_slug)
m_new_onbase <- lm(runs ~ new_onbase, data = mlb11)
summary(m_new_onbase)
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
library(ggplot2)
detach("package:statsr", unload = TRUE)
library(dplyr)
library(ggplot2)
library(ggplot2)
library(statsr)
detach("package:statsr", unload = TRUE)
library(ggplot2)
library(GGally)
library(ggplot2)
library(GGally)
library(dplyr)
library(statsr)
data(evals)
# type your code for Question 3 here, and Knit
plot(evals$score)
# type your code for Question 3 here, and Knit
hist(evals$score)
summary(evals$score)
# type your code for Question 3 here, and Knit
hist(evals$score)
hist(evals$score)
summary(evals$score)
hist(evals$score)
summary(evals$score)
sum(evals$score < 3)
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
# type your code for the Exercise here, and Knit
lm(score ~ bty_avg, data = evals)
m1 <- lm(score ~ bty_avg, data = evals)
summary()
# type your code for the Exercise here, and Knit
m1 <- lm(score ~ bty_avg, data = evals)
summary(m1)
# type your code for the Question 5 here, and Knit
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
# type your code for the Question 5 here, and Knit
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram() +
xlab("Residuals")
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
ggplot(data = m_bty_gen, aes(x = .resid)) +
geom_histogram() +
xlab("Residuals")
ggplot(data = m_bty_gen, aes(sample = .resid)) +
stat_qq()
ggplot(data = m_bty_gen, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
# type your code for the Exercise here, and Knit
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
summary(evals$rank)
m3 <- lm(score ~ rank, data = evals)
summary(m3)
newprof <- data.frame(gender = "male", bty_avg = 3)
predict(m_bty_gen, newprof)
predict(m_bty_gen, newprof, interval = "prediction", level = 0.95)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
m2 = lm(score ~ rank + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
m3 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + pic_outfit + pic_color, data = evals)
summary(m3)$adj.r.squared
m4 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m4)$adj.r.squared
m5 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m5)$adj.r.squared
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
library(ggplot2)
data(ames)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 250)
ames %>%
summarise(mu = mean(area), pop_med = median(area),
sigma = sd(area), pop_iqr = IQR(area),
pop_min = min(area), pop_max = max(area),
pop_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
pop_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
In this lab we have a
## The unknown sampling distribution
In this lab we have access to the entire population, but this is rarely the case in real life. Gathering information on an entire population is often extremely costly or impossible. Because of this, we often take a sample of the population and use that to understand the properties of the population.
samp1 <- ames %>%
sample_n(size = 50)
samp1 %>%
summarise(x_bar = mean(area))
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
sample_means_small <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
sample_means_small
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
set.seed(9102015)                 # make sure to change the seed
n <- 60
samp <- sample_n(ames, n)
n <- 60
samp <- sample_n(ames, n)
samp <- sample_n(ames, n)
library(statsr)
library(dplyr)
library(ggplot2)
<li>
<li>
data(ames)
n <- 60
samp <- sample_n(ames, n)
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
1-0.005`
1-0.005
qnorm(0.995)
library(statsr)
library(dplyr)
library(ggplot2)
data(nc)
nc[1,]
sum(is.na(nc$gained))
summary(nc$gained)
# type your code for the Question 3 here, and Knit
ggplot(data = nc, aes(x = habit, y = weight)) + geom_boxplot()
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
# type your code for the Question 5 here, and Knit
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci", method = "theoretical")
# type your code for Question 6 here, and Knit
inference(y = weeks, data = nc, statistic = "mean", type = "ci", method = "theoretical")
# type your code for Question 6 here, and Knit
inference(y = weeks, data = nc, statistic = "mean", type = "ci", method = "theoretical", conf_level = 0.99)
# type your code for Question 7 here, and Knit
names(nc)
# type your code for Question 7 here, and Knit
nanc$mage
)
# type your code for Question 7 here, and Knit
names(nc)
View(nc)
# type your code for Question 7 here, and Knit
ggplot(data = nc, aes(x = mage, y = mature)) + geom_boxplot()
library(statsr)
library(dplyr)
library(ggplot2)
data(atheism)
head(atheism)
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012")
# type your code for Question 7 here, and Knit
head(us12)
# type your code for Question 7 here, and Knit
summary(use12$response)
# type your code for Question 7 here, and Knit
summary(us12$response)
# type your code for Question 7 here, and Knit
summary(us12$response) / nrow(us12)
inference(y = response, data = us12, statistic = "proportion", type = "ci", method = "theoretical", success = "atheist")
# type your code for Question 8 here, and Knit
(0.0364 - 0.0634) / 2
d <- data.frame(p <- seq(0, 1, 0.01))
n <- 1000
d <- d %>%
mutate(me = 1.96*sqrt(p*(1 - p)/n))
ggplot(d, aes(x = p, y = me)) +
geom_line()
0.1 * 0.9 / 1146 + 0.09 * 0.91 / 1146
s = sqrt(0.1 * 0.9 / 1146 + 0.09 * 0.91 / 1146)
s
0.01 / s
s = sqrt(0.01 * 0.99 / 1002 + 0.05 * 0.95 / 1002)
0.04 / s
39 * 0.05
qnorm(0.975)
1.96 / 0.01 * 0.5
98 * 98
pnrom(2.33)
pnorm(2.33)
1-pnorm(21/9)
1-pnorm(21/8)
a = 1-pnorm(21/9)
b = 1-pnorm(21/8)
0.55 * b / (0.55 * b + 0.45 * a)
a = (170-149)/8
dnorm(a)
dnorm(0)
a = dnorm(a)
b = dnorm((170-149)/9)
b
a * 0.55 / (a * 0.55 + b * 0.45)
a
b
setwd("D:/Github Repo/Mastering-Software-Development-in-R/Shiny/27_Shinydashboard")
shiny::runApp()
install.packages("shinycssloaders")
runApp()
diamonds
write(diamonds, file = "diamonds.csv")
write.table(diamonds, file = "diamonds.csv")
write.table(diamonds, file = "diamonds.csv", sep = ",")
write.table(diamonds, file = "diamonds.csv", sep = ",", row.names = FALSE)
runApp()
write.table(diamonds[1:2000,], file = "diamonds.csv", sep = ",", row.names = FALSE)
runApp()
read.table(file = "./diamonds.csv", sep = ",", header = T stringsAsFactors = T)
read.table(file = "./diamonds.csv", sep = ",", header = T, stringsAsFactors = T)
runApp()
runApp()
?fileInput
runApp()
runApp()
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/09_input_files')
runApp()
?withSpinner
runApp()
runApp()
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/test.R')
runApp()
